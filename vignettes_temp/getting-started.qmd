---
title: "Getting Started with peruopen"
format: html
vignette: >
  %\VignetteIndexEntry{Getting Started with peruopen}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include: false
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  eval = FALSE
)
```

```{r}
#| label: setup
library(peruopen)
library(dplyr)
```

## Overview

The `peruopen` package provides a comprehensive interface to Peru's CKAN data portal (datosabiertos.gob.pe), enabling you to search, discover, and download open government datasets directly into R.

This guide will show you how to:

1. Search the complete data catalog
2. Filter datasets by specific criteria (like CDC tags)
3. Download and load resources as data frames

## Basic Usage

### Getting the Complete Catalog

The easiest way to start is by getting a catalog of all available datasets:

```{r}
# Get the complete catalog (may take a moment the first time)
catalog <- po_catalog()

# View the structure
str(catalog, max.level = 1)
```

The catalog contains three main components:

- `datasets`: Information about each dataset
- `resources`: Individual files/resources within datasets  
- `summary`: Overall statistics

```{r}
# Quick overview
catalog$summary$n_datasets
catalog$summary$n_resources
catalog$summary$total_size_gb
```

### Exploring Available Data

Use `po_explore()` to get organized views of the catalog:

```{r}
# General exploration
overview <- po_explore()

# View top organizations
head(overview$by_organization)

# View available formats
head(overview$by_format)
```

## Searching the Catalog

### Basic Search

Search across all dataset titles, descriptions, organizations, and tags:

```{r}
# Search for health-related data
health_data <- po_search("salud")
print(health_data)

# Search for COVID data
covid_data <- po_search("covid")

# View matching datasets
head(covid_data$datasets)
```

### Advanced Filtering

You can combine multiple filters for precise searches:

```{r}
# Find CSV files from MINSA about epidemiology
epi_csv <- po_search(
  query = "epidemiologia",
  organizations = "MINSA", 
  formats = "CSV"
)

# Search by specific tags only
tag_search <- po_search("dengue", search_tags_only = TRUE)

# Multiple tag search
health_tags <- po_search(tags = c("salud", "medicina", "epidemiologia"))
```

## Working with CDC Data

Let's focus on datasets related to CDC (Centro Nacional de Epidemiología, Prevención y Control de Enfermedades):

### Finding CDC Datasets

```{r}
# Search for CDC-related datasets
cdc_data <- po_search("CDC")

# Alternative: search in organization field specifically
cdc_org <- po_search(organizations = "CDC")

# View what we found
print(cdc_data)
```

### Filtering CDC Resources

Once you have CDC datasets, you can filter the resources by format:

```{r}
# Get all resources from CDC datasets
cdc_resources <- cdc_data$resources

# Filter for CSV files only
cdc_csv <- cdc_resources %>%
  filter(format == "CSV")

# Filter for Excel files
cdc_excel <- cdc_resources %>%
  filter(format %in% c("XLSX", "XLS"))

# View resource details
head(cdc_csv[, c("resource_name", "dataset_title", "size_mb", "format")])
```

### Size-Based Filtering

Filter resources by file size for easier handling:

```{r}
# Small files (under 10 MB) for quick analysis
small_files <- cdc_resources %>%
  filter(size_mb < 10, format == "CSV")

# Medium files (10-100 MB)
medium_files <- cdc_resources %>%
  filter(size_mb >= 10, size_mb < 100)

print(paste("Small CSV files:", nrow(small_files)))
print(paste("Medium files:", nrow(medium_files)))
```

## Downloading and Loading Data

### Using po_get() for Easy Access

The simplest way to get data is with `po_get()`:

```{r}
# Get data from a specific dataset (replace with actual dataset name)
# dataset_data <- po_get("nombre-del-dataset")

# Get just the metadata
# dataset_info <- po_get("nombre-del-dataset", what = "info")

# Get both data and metadata
# complete_data <- po_get("nombre-del-dataset", what = "all")
```

### Loading Specific Resources

If you know the resource ID, you can load it directly:

```{r}
# From your search results, pick a resource ID
if (nrow(cdc_csv) > 0) {
  resource_id <- cdc_csv$resource_id[1]
  
  # Load the resource as a data frame
  # data <- po_get(resource_id)
  
  # View the structure
  # str(data)
}
```

### Batch Processing Multiple Resources

For analyzing multiple datasets:

```{r}
# Function to safely load resources
load_resource_safely <- function(resource_id) {
  tryCatch({
    po_get(resource_id)
  }, error = function(e) {
    message("Failed to load resource ", resource_id, ": ", e$message)
    NULL
  })
}

# Load multiple small CSV files
if (nrow(small_files) > 0) {
  # Take first 3 files as example
  sample_resources <- head(small_files$resource_id, 3)
  
  # Load them into a list
  # data_list <- lapply(sample_resources, load_resource_safely)
  # names(data_list) <- sample_resources
  
  # Remove any failed loads
  # data_list <- data_list[!sapply(data_list, is.null)]
}
```

## Working with Downloaded Data

### Data Cleaning and Preparation

```{r}
# Example of basic data exploration
explore_dataset <- function(data, name = "Dataset") {
  cat("Dataset:", name, "\n")
  cat("Dimensions:", nrow(data), "rows x", ncol(data), "columns\n")
  cat("Column names:", paste(head(names(data)), collapse = ", "), "\n")
  
  # Show missing data summary
  missing_summary <- sapply(data, function(x) sum(is.na(x)))
  cat("Missing values:", sum(missing_summary), "total\n\n")
  
  return(invisible(data))
}

# Use with your loaded data
# explore_dataset(data, "CDC Health Data")
```

### Combining Multiple Datasets

```{r}
# Function to combine datasets with common columns
combine_compatible_datasets <- function(data_list) {
  # Find common columns
  all_columns <- lapply(data_list, names)
  common_cols <- Reduce(intersect, all_columns)
  
  if (length(common_cols) == 0) {
    stop("No common columns found")
  }
  
  # Select common columns and combine
  standardized_data <- lapply(data_list, function(df) df[, common_cols])
  combined <- do.call(rbind, standardized_data)
  
  return(combined)
}

# Use when you have multiple compatible datasets
# combined_data <- combine_compatible_datasets(data_list)
```

## Performance Tips

### Caching

The package automatically caches the catalog for better performance:

```{r}
# Force refresh of cached catalog
catalog_fresh <- po_catalog(refresh = TRUE)

# Check cache information
cache_info()

# Clear cache if needed
# clear_cache()
```

### Progressive Loading

For large catalogs, use progressive loading:

```{r}
# Start with a subset
partial_catalog <- po_catalog(target_size = 1000)

# Extend if you need more
extended_catalog <- po_catalog(target_size = 2000, extend_existing = TRUE)
```

## Real-World Example: Analyzing Epidemiological Data

Here's a complete workflow for analyzing CDC epidemiological data:

```{r}
# 1. Find relevant datasets
epi_data <- po_search(
  query = "epidemiologia",
  organizations = "CDC",
  formats = "CSV"
)

# 2. Filter for manageable file sizes
suitable_files <- epi_data$resources %>%
  filter(size_mb < 50, format == "CSV") %>%
  arrange(desc(last_modified))

# 3. Load the most recent dataset
if (nrow(suitable_files) > 0) {
  # recent_data <- po_get(suitable_files$resource_id[1])
  
  # 4. Basic analysis
  # explore_dataset(recent_data, "Recent Epidemiological Data")
  
  # 5. Save for further analysis
  # write.csv(recent_data, "cdc_epi_data.csv", row.names = FALSE)
}
```

## Next Steps

- Explore the full function reference with `?po_catalog`, `?po_search`, etc.
- Check out specific organizations with `po_explore("MINSA")` or `po_explore("MEF")`
- Use `po_list_organizations()` to see all available data sources
- Set up automated data pipelines using the package's caching features

For more detailed examples and advanced usage, see the package documentation and additional vignettes.